# -*- coding: utf-8 -*-
"""ECG Simulation and Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AfsB0me8vAQLumuBCvWghgv7A7yA1Re9
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('./dataset/mitbih_train.csv', header = None)

class_1 = df[df[187]==1.0]
class_2 = df[df[187]==2.0]
class_3 = df[df[187]==3.0]
class_4 = df[df[187]==4.0]
class_0 = df[df[187]==0.0].sample(n = 8000)
new_df = pd.concat([class_0, class_1, class_2, class_3, class_4])

new_df.shape

X_train, X_test, y_train, y_test = train_test_split(new_df.drop([187], axis=1), new_df[187], test_size = 0.3)
X_train = np.array(X_train).reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = np.array(X_test).reshape(X_test.shape[0], X_test.shape[1], 1)

X_train.shape

from tensorflow.keras import Sequential,utils
from tensorflow.keras.layers import Flatten, Dense, Conv1D, MaxPool1D, Dropout

clf = Sequential()

clf.add(Conv1D(filters=256, kernel_size=(3,), padding='same', activation='relu', input_shape = (X_train.shape[1],1)))
clf.add(MaxPool1D(pool_size=(3,), strides=3, padding='same'))

clf.add(Conv1D(filters=128, kernel_size=(5,), padding='same', activation='relu'))    
clf.add(MaxPool1D(pool_size=(3,), strides=3, padding='same'))
clf.add(Dropout(0.5))

clf.add(Flatten())

clf.add(Dense(units = 1000, activation='relu'))
clf.add(Dense(units = 300, activation='relu'))
clf.add(Dense(units = 5, activation='softmax'))

clf.compile(optimizer='adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])

history = clf.fit(X_train, y_train, epochs = 20)

y_pred = clf.predict(X_test)
y_pred

import seaborn as sns
from sklearn.metrics import confusion_matrix

y_lbl = [np.where(i == np.max(i))[0][0] for i in y_pred]
mat = confusion_matrix(y_test, y_lbl)
fig, ax = plt.subplots(figsize=(7,7))
sns.heatmap(mat, annot = True)

from sklearn import metrics

print("Accuracy score of the predictions: {0}".format(metrics.accuracy_score(y_lbl, y_test)))

# test = pd.read_csv('mitbih_test.csv', header = None)

test_data = pd.read_csv("./dataset/mitbih_test.csv", header=None)
test_df = pd.DataFrame(test_data)

test_X = test_df.drop([187], axis=1) 
test_y = test_df[187]

test_X = np.array(test_X).reshape(test_X.shape[0], test_X.shape[1], 1)

test_pred_y = clf.predict(test_X)

clf.save('model/ECG Classifier.h5')  # creates a HDF5 file 'my_model.h5'

